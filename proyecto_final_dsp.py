# -*- coding: utf-8 -*-
"""Proyecto_Final_DSP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hyhb0E-S9foAe1h_1p0gTI_o8K6tfNq-

###Importando Data
"""

#Importando librerias
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.preprocessing import OneHotEncoder
from keras.models import Sequential
from keras.models import load_model
from keras.layers import Dense, Activation
from keras.utils import to_categorical
import tensorflow as tf
import seaborn as sn
import matplotlib.pyplot as plt
from  sklearn.metrics import confusion_matrix
##Importando desde el drive los archivos de training data y testing data
#from google.colab import drive


PATH = 'C:/Users/JUAN PABLO/OneDrive-correounivalle.edu.co/Universidad/VIII/DSP/Proyectos/ProyectoIII/Parametrizaci-nMarchaHumana'
#dfcars = pd.read_csv(str(filePath))

#DTesting = pd.read_csv('Test.csv')
#DTraining = pd.read_csv('Train.csv')
#DTrain = DTraining
#DataAcc=DTrain.iloc[0:,0:40]

"""###Modelo-1"""
"""
DTrain = DTraining
DataAcc=DTrain.iloc[0:,0:40]
DataAcc
le=preprocessing.LabelEncoder()

#DTrain = DTraining
DataGyro=DTrain.iloc[0:,120:160]
DataAcc=DTrain.iloc[0:,0:40]

Data_Gyro=DataGyro.to_numpy()
Data_Acc=DataAcc.to_numpy()

DataInput=np.append(Data_Acc,Data_Gyro, axis=1)
#DataInput=Data_Acc;

DTest=DTesting
DGyro=DTest.iloc[0:,120:160]
DAcc=DTest.iloc[0:,0:40]

D_Gyro=DGyro.to_numpy()
D_Acc=DAcc.to_numpy()

DTestIn=np.append(D_Acc,D_Gyro, axis=1)
#DTestIn=D_Acc

le.fit(DTrain['Activity'])
list(le.classes_)

DataOutput=le.transform(DTrain['Activity'])
DataOutput=to_categorical(DataOutput)

DTestOut=le.transform(DTest['Activity'])
DTestOut=to_categorical(DTestOut)

inputdim=DataInput.shape[1]
outputdim=DataOutput.shape[1]

##Red Neuronal 
model01= Sequential () 
model01.add(Dense(units=250, activation='relu', input_dim=inputdim))
model01.add(Dense(units=250, activation='relu', input_dim=250))
model01.add(Dense(units=250, activation='relu', input_dim=250))
model01.add(Dense(units=outputdim, activation='softmax'))

##Entrenamiento de red

model01.compile(optimizer='adadelta',loss='categorical_crossentropy',metrics=['accuracy'])

history01 = model01.fit(DataInput,DataOutput, epochs=100, batch_size=150, validation_split=0.001, shuffle=False)

Testpre= model01.predict(DTestIn)



Testpre=Testpre>= 0.5
Testpre=Testpre + [0, 0, 0, 0, 0, 0]

def GetMatrix():
    cm=confusion_matrix(DTestOut.argmax(axis=1),Testpre.argmax(axis=1))
    #print(cm)
    return cm



"""
"""
resultado = pd.DataFrame(cm)
fig = plt.figure(figsize= (6,6))
ax = fig.add_subplot(1,1,1)
sn.heatmap(resultado, annot=True, linewidths=1, linecolor= 'white', cmap="GnBu")
font= {'family': 'serif',
     'color': 'darkred',
    'weight': 'normal',
    'size':14}
ax.set_title("Matrix de confusion ",fontdict ={'family': 'serif','color': 'black','weight': 'normal','size':40})
ax.set_ylabel("Preditec Label", labelpad=20, fontdict={'family': 'serif','color': 'black','weight': 'normal','size':20})
ax.set_xlabel("True Label", labelpad=15, fontdict={'family': 'serif','color': 'black','weight': 'normal','size':20})
"""
"""
model01.save(PATH+"Proyecto.h5")
"""
def Model_Guess(dfcars,Li):
    Li=Li
    Ls=Li+1
    DTrain = dfcars
    DataAcc=DTrain.iloc[0:,0:40]
    label=['LAYING','SITING','STANDING', 'WALKING','WALKING_DOWNSTAIRS','WALKING_UPSTAIRS']
    Gyro=DTrain.iloc[Li:Ls,120:160]
    Acc=DTrain.iloc[Li:Ls,0:40]

    PredictGyro=Gyro.to_numpy()
    PredictAcc=Acc.to_numpy()

    DataPredict=np.append(PredictAcc,PredictGyro, axis=1)

    Actividad=DTrain.iloc[Li:Ls,562:]
    print(Actividad)

    red=load_model('Proyecto.h5')#,custom_objects = { "tf": tf })
    actividad=red.predict(DataPredict)
    actividad=actividad[0]
    actividad=np.argmax(actividad)
    print(label[actividad])
    return actividad


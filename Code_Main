import sys
from sklearn.metrics import confusion_matrix
import seaborn as sn
import pandas as pd
import matplotlib

matplotlib.use('Qt5Agg')
from PyQt5 import uic, QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import numpy as np
import random

y_actu = [2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2]
y_pred = [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2]

qtCreatorFile = "GuiDesigner.ui"  # Aquí va el nombre de tu archivo

Ui_MainWindow, QtBaseClass = uic.loadUiType(qtCreatorFile)


class MyApp(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)

        # Aquí van los botones
        self.Import_Button.clicked.connect(self.getCSV)
        self.Graph_Button.clicked.connect(self.graphics)

    # Aquí van las nuevas funciones
    # Esta función abre el archivo CSV
    def graphics(self):
        fs = 500
        f = random.randint(1, 100)
        ts = 1 / fs
        length_of_signal = 100
        t = np.linspace(0, 1, length_of_signal)

        cosinus_signal = np.cos(2 * np.pi * f * t)
        sinus_signal = np.sin(2 * np.pi * f * t)

        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(t, cosinus_signal)
        self.MplWidget.canvas.axes.plot(t, sinus_signal)
        self.MplWidget.canvas.axes.legend(('cosinus', 'sinus'), loc='upper right')
        self.MplWidget.canvas.axes.set_title('Cosinus - Sinus Signal')
        self.MplWidget.canvas.draw()

        self.MplWidget_2.canvas.axes.clear()
        x = self.df['col1']
        #y = self.df['col2']
        self.MplWidget_2.canvas.axes.hist(x, 2)
        # self.MplWidget_2.canvas.axes.plot(t, sinus_signal)
        self.MplWidget_2.canvas.axes.legend(('Col1'), loc='upper right')
        self.MplWidget_2.canvas.axes.set_title('CSV file')
        self.MplWidget_2.canvas.draw()

        cm = confusion_matrix(y_actu, y_pred)

        resultado = pd.DataFrame(cm, index=['Fresh Apple', 'Fresh Banana', 'Fresh Orange'],
                                 columns=['Fresh Apple', 'Fresh Banana', 'Fresh Orange'])
        # self.MxConfusion.canvas=\
        self.MxConfusion.canvas.axes = sn.heatmap(resultado, annot=True, linewidths=1, linecolor='white', cmap="Reds")
        # font = {'family': 'serif',
        #       'color': 'darkred',
        #      'weight': 'normal',
        #     'size': 6}
        self.MxConfusion.canvas.axes.set_title("Matrix de confusion ")
        self.MxConfusion.canvas.axes.set_ylabel("Preditec Label")
        self.MxConfusion.canvas.axes.set_xlabel("True Label")
        self.MxConfusion.canvas.draw()
        print(cm)

    def getCSV(self):
        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', '/home/OneDrive-correounivalle.edu.co/')
        if filePath != "":
            print("Dirección", filePath)  # Opcional imprimir la dirección del archivo
            self.df = pd.read_csv(str(filePath))
            dfcars = pd.read_csv(str(filePath))
            # Mostrar los encabezados de las primeras cinco filas de los datos
            print(dfcars.head())
            print(dfcars.shape)  # 12 columnas, cada una de longitud 32
            #print(len(dfcars))  # el número de filas en el dataframe, también en la longitud de las series
            #print(len(dfcars.mpg))  # la longitud de una serie


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MyApp()
    window.show()
